import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# === PARAMETERS ===
CSV_FILE = "PAXGUSDT_5m.csv"
START_DATE = "2025-01-01"
END_DATE   = "2025-10-10"

TP_TARGET = 0.02     # Take profit +2%
SL_LIMIT  = -0.01    # Stop loss -1%
MAX_BARS_IN_TRADE = 24  # 2 hours on 5m bars
ANN = 252 * (24 * 60 // 5)
FEE_RATE = 0.00005    # 0.005% per trade

# === LOAD DATA ===
df = pd.read_csv(CSV_FILE, index_col='Open Time', parse_dates=True)
df = df.loc[START_DATE:END_DATE]
df[['Open', 'High', 'Low', 'Close', 'Volume']] = df[['Open', 'High', 'Low', 'Close', 'Volume']].astype(float)
df.dropna(inplace=True)

# === INDICATORS ===
df['EMA_12'] = df['Close'].ewm(span=12).mean()
df['EMA_26'] = df['Close'].ewm(span=26).mean()
df['MACD'] = df['EMA_12'] - df['EMA_26']
df['MACD_signal'] = df['MACD'].ewm(span=9).mean()
df['MACD_hist'] = df['MACD'] - df['MACD_signal']

df['ATR'] = df['High'] - df['Low']
df['ATR_avg'] = df['ATR'].rolling(50).mean()
df['volatility_ok'] = df['ATR'] > df['ATR_avg']

df['macd_positive_streak'] = (df['MACD_hist'] > 0).rolling(3).sum() == 3
df['entry_signal'] = df['macd_positive_streak'] & df['volatility_ok']

# === BACKTEST ===
rets = df['Close'].pct_change().fillna(0)
dates = df.index

equity = 1.0
equity_curve = []
position_curve = []
in_position = False
entry_price = 0
entry_index = None
positions = []

for i in range(1, len(dates)):
    t = dates[i]
    row = df.iloc[i]
    price = row['Close']
    signal = row['entry_signal']
    macd_hist = row['MACD_hist']

    if not in_position and signal:
        in_position = True
        entry_price = price
        entry_index = i
        positions.append({
            'entry_time': t,
            'entry_price': price,
            'exit_time': None,
            'exit_price': None,
            'return': None,
            'exit_reason': None
        })

    elif in_position:
        current_return = (price / entry_price) - 1
        bars_in_trade = i - entry_index

        if (
            macd_hist < 0 or
            current_return >= TP_TARGET or
            current_return <= SL_LIMIT or
            bars_in_trade >= MAX_BARS_IN_TRADE
        ):
            reason = (
                'MACD Reversal' if macd_hist < 0 else
                'Take Profit' if current_return >= TP_TARGET else
                'Stop Loss' if current_return <= SL_LIMIT else
                'Time Expired'
            )
            in_position = False
            positions[-1].update({
                'exit_time': t,
                'exit_price': price,
                'return': current_return,
                'exit_reason': reason
            })

    equity *= (1 + rets[t]) if in_position else 1
    equity_curve.append(equity)
    position_curve.append(1 if in_position else 0)

# === RESULTS ===
equity_series = pd.Series(equity_curve, index=dates[1:])
strat_returns = equity_series.pct_change().replace([np.inf, -np.inf], np.nan).fillna(0)
buy_hold = df['Close'].pct_change().loc[dates[1:]]

def stats(r, ann=ANN):
    if r.empty or np.isclose(r.std(), 0):
        return np.nan, np.nan, np.nan
    cum = (1 + r).cumprod()
    annret = cum.iloc[-1] ** (ann / len(r)) - 1
    sharpe = (r.mean() / r.std()) * np.sqrt(ann)
    mdd = ((cum / cum.cummax()) - 1).min()
    return annret, sharpe, mdd

ann, sh, mdd = stats(strat_returns)
bh_ann, bh_sh, bh_mdd = stats(buy_hold)

print("\n=== PAXG/USDT 5m Strategy ===")
print(f"Strategy    : AnnRet {ann:.2%} | Sharpe {sh:.2f} | MaxDD {mdd:.2%}")
print(f"Buy & Hold  : AnnRet {bh_ann:.2%} | Sharpe {bh_sh:.2f} | MaxDD {bh_mdd:.2%}")

# === PLOT ===
plt.figure(figsize=(12, 5))
(1 + strat_returns).cumprod().plot(label='Strategy', lw=2, color='gold')
(1 + buy_hold).cumprod().plot(label='Buy & Hold', lw=2, ls='--', color='gray')
plt.title("PAXG/USDT Strategy â€” Trend MACD + Volatility Filter")
plt.ylabel("Cumulative Return")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# === TRADING ACTIVITY ===
trades_closed = [p for p in positions if p['exit_time']]
total_trades = len(trades_closed)
reasons = pd.Series([p['exit_reason'] for p in trades_closed]).value_counts()

gross_perf = equity_series.iloc[-1]
fees = total_trades * FEE_RATE
net_perf = gross_perf * (1 - fees)

print("\n=== Trading Activity ===")
print(f"Total trades executed     : {total_trades}")
for reason, count in reasons.items():
    print(f"Exits from {reason:<16}: {count}")
print(f"Estimated fee impact      : -{fees:.2%}")
print(f"Gross Return              : {(gross_perf - 1):.2%}")
print(f"Net Return After Fees     : {(net_perf - 1):.2%}")

# === WIN/LOSS STATS ===
winning_trades = [p for p in trades_closed if p['return'] is not None and p['return'] > 0]
losing_trades  = [p for p in trades_closed if p['return'] is not None and p['return'] <= 0]

print(f"Winning trades             : {len(winning_trades)}")
print(f"Losing trades              : {len(losing_trades)}")

if total_trades > 0:
    win_rate = len(winning_trades) / total_trades
    print(f"Win Rate                   : {win_rate:.2%}")
